[1mdiff --git a/.babelrc b/.babelrc[m
[1mnew file mode 100644[m
[1mindex 0000000..801edec[m
[1m--- /dev/null[m
[1m+++ b/.babelrc[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "presets": [[m
[32m+[m[32m    ["env", {[m
[32m+[m[32m      "modules": false,[m
[32m+[m[32m      "targets": {[m
[32m+[m[32m        "browsers": ["> 1%", "last 2 versions", "not ie <= 8"][m
[32m+[m[32m      }[m
[32m+[m[32m    }],[m
[32m+[m[32m    "stage-2"[m
[32m+[m[32m  ],[m
[32m+[m[32m  "plugins": ["transform-vue-jsx", "transform-runtime"],[m
[32m+[m[32m  "env": {[m
[32m+[m[32m    "test": {[m
[32m+[m[32m      "presets": ["env", "stage-2"],[m
[32m+[m[32m      "plugins": ["transform-vue-jsx", "istanbul"][m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/.editorconfig b/.editorconfig[m
[1mnew file mode 100644[m
[1mindex 0000000..9d08a1a[m
[1m--- /dev/null[m
[1m+++ b/.editorconfig[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32mroot = true[m
[32m+[m
[32m+[m[32m[*][m
[32m+[m[32mcharset = utf-8[m
[32m+[m[32mindent_style = space[m
[32m+[m[32mindent_size = 2[m
[32m+[m[32mend_of_line = lf[m
[32m+[m[32minsert_final_newline = true[m
[32m+[m[32mtrim_trailing_whitespace = true[m
[1mdiff --git a/.eslintignore b/.eslintignore[m
[1mnew file mode 100644[m
[1mindex 0000000..e2192c5[m
[1m--- /dev/null[m
[1m+++ b/.eslintignore[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32m/build/[m
[32m+[m[32m/config/[m
[32m+[m[32m/dist/[m
[32m+[m[32m/*.js[m
[32m+[m[32m/test/unit/coverage/[m
[1mdiff --git a/.eslintrc.js b/.eslintrc.js[m
[1mnew file mode 100644[m
[1mindex 0000000..3b85540[m
[1m--- /dev/null[m
[1m+++ b/.eslintrc.js[m
[36m@@ -0,0 +1,50 @@[m
[32m+[m[32m// https://eslint.org/docs/user-guide/configuring[m
[32m+[m
[32m+[m[32mmodule.exports = {[m
[32m+[m[32m  root: true,[m
[32m+[m[32m  parserOptions: {[m
[32m+[m[32m    parser: 'babel-eslint'[m
[32m+[m[32m  },[m
[32m+[m[32m  env: {[m
[32m+[m[32m    browser: true,[m
[32m+[m[32m  },[m
[32m+[m[32m  // https://github.com/vuejs/eslint-plugin-vue#priority-a-essential-error-prevention[m
[32m+[m[32m  // consider switching to `plugin:vue/strongly-recommended` or `plugin:vue/recommended` for stricter rules.[m
[32m+[m[32m  extends: ['plugin:vue/essential', 'airbnb-base'],[m
[32m+[m[32m  // required to lint *.vue files[m
[32m+[m[32m  plugins: [[m
[32m+[m[32m    'vue'[m
[32m+[m[32m  ],[m
[32m+[m[32m  // check if imports actually resolve[m
[32m+[m[32m  settings: {[m
[32m+[m[32m    'import/resolver': {[m
[32m+[m[32m      webpack: {[m
[32m+[m[32m        config: 'build/webpack.base.conf.js'[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m  },[m
[32m+[m[32m  // add your custom rules here[m
[32m+[m[32m  rules: {[m
[32m+[m[32m    // don't require .vue extension when importing[m
[32m+[m[32m    'import/extensions': ['error', 'always', {[m
[32m+[m[32m      js: 'never',[m
[32m+[m[32m      vue: 'never'[m
[32m+[m[32m    }],[m
[32m+[m[32m    // disallow reassignment of function parameters[m
[32m+[m[32m    // disallow parameter object manipulation except for specific exclusions[m
[32m+[m[32m    'no-param-reassign': ['error', {[m
[32m+[m[32m      props: true,[m
[32m+[m[32m      ignorePropertyModificationsFor: [[m
[32m+[m[32m        'state', // for vuex state[m
[32m+[m[32m        'acc', // for reduce accumulators[m
[32m+[m[32m        'e' // for e.returnvalue[m
[32m+[m[32m      ][m
[32m+[m[32m    }],[m
[32m+[m[32m    // allow optionalDependencies[m
[32m+[m[32m    'import/no-extraneous-dependencies': ['error', {[m
[32m+[m[32m      optionalDependencies: ['test/unit/index.js'][m
[32m+[m[32m    }],[m
[32m+[m[32m    // allow debugger during development[m
[32m+[m[32m    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off'[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/.firebaserc b/.firebaserc[m
[1mnew file mode 100644[m
[1mindex 0000000..0f39513[m
[1m--- /dev/null[m
[1m+++ b/.firebaserc[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32m{[m
[32m+[m[32m  "projects": {[m
[32m+[m[32m    "default": "primosapp-193406"[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..dfb4167[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m.DS_Store[m
[32m+[m[32mnode_modules/[m
[32m+[m[32m/dist/[m
[32m+[m[32mnpm-debug.log*[m
[32m+[m[32myarn-debug.log*[m
[32m+[m[32myarn-error.log*[m
[32m+[m[32m/test/unit/coverage/[m
[32m+[m[32m/test/e2e/reports/[m
[32m+[m[32mselenium-debug.log[m
[32m+[m
[32m+[m[32m# Editor directories and files[m
[32m+[m[32m.idea[m
[32m+[m[32m.vscode[m
[32m+[m[32m*.suo[m
[32m+[m[32m*.ntvs*[m
[32m+[m[32m*.njsproj[m
[32m+[m[32m*.sln[m
[1mdiff --git a/.postcssrc.js b/.postcssrc.js[m
[1mnew file mode 100644[m
[1mindex 0000000..eee3e92[m
[1m--- /dev/null[m
[1m+++ b/.postcssrc.js[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m// https://github.com/michael-ciniawsky/postcss-load-config[m
[32m+[m
[32m+[m[32mmodule.exports = {[m
[32m+[m[32m  "plugins": {[m
[32m+[m[32m    "postcss-import": {},[m
[32m+[m[32m    "postcss-url": {},[m
[32m+[m[32m    // to edit target browsers: use "browserslist" field in package.json[m
[32m+[m[32m    "autoprefixer": {}[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/README.md b/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..a499cce[m
[1m--- /dev/null[m
[1m+++ b/README.md[m
[36m@@ -0,0 +1,30 @@[m
[32m+[m[32m# primosapp[m
[32m+[m
[32m+[m[32m> GestiÃ³n de gastos domiciliarios[m
[32m+[m
[32m+[m[32m## Build Setup[m
[32m+[m
[32m+[m[32m``` bash[m
[32m+[m[32m# install dependencies[m
[32m+[m[32mnpm install[m
[32m+[m
[32m+[m[32m# serve with hot reload at localhost:8080[m
[32m+[m[32mnpm run dev[m
[32m+[m
[32m+[m[32m# build for production with minification[m
[32m+[m[32mnpm run build[m
[32m+[m
[32m+[m[32m# build for production and view the bundle analyzer report[m
[32m+[m[32mnpm run build --report[m
[32m+[m
[32m+[m[32m# run unit tests[m
[32m+[m[32mnpm run unit[m
[32m+[m
[32m+[m[32m# run e2e tests[m
[32m+[m[32mnpm run e2e[m
[32m+[m
[32m+[m[32m# run all tests[m
[32m+[m[32mnpm test[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mFor a detailed explanation on how things work, check out the [guide](http://vuejs-templates.github.io/webpack/) and [docs for vue-loader](http://vuejs.github.io/vue-loader).[m
[1mdiff --git a/build/build.js b/build/build.js[m
[1mnew file mode 100644[m
[1mindex 0000000..8f2ad8a[m
[1m--- /dev/null[m
[1m+++ b/build/build.js[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32m'use strict'[m
[32m+[m[32mrequire('./check-versions')()[m
[32m+[m
[32m+[m[32mprocess.env.NODE_ENV = 'production'[m
[32m+[m
[32m+[m[32mconst ora = require('ora')[m
[32m+[m[32mconst rm = require('rimraf')[m
[32m+[m[32mconst path = require('path')[m
[32m+[m[32mconst chalk = require('chalk')[m
[32m+[m[32mconst webpack = require('webpack')[m
[32m+[m[32mconst config = require('../config')[m
[32m+[m[32mconst webpackConfig = require('./webpack.prod.conf')[m
[32m+[m
[32m+[m[32mconst spinner = ora('building for production...')[m
[32m+[m[32mspinner.start()[m
[32m+[m
[32m+[m[32mrm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err => {[m
[32m+[m[32m  if (err) throw err[m
[32m+[m[32m  webpack(webpackConfig, (err, stats) => {[m
[32m+[m[32m    spinner.stop()[m
[32m+[m[32m    if (err) throw err[m
[32m+[m[32m    process.stdout.write(stats.toString({[m
[32m+[m[32m      colors: true,[m
[32m+[m[32m      modules: false,[m
[32m+[m[32m      children: false, // If you are using ts-loader, setting this to true will make TypeScript errors show up during build.[m
[32m+[m[32m      chunks: false,[m
[32m+[m[32m      chunkModules: false[m
[32m+[m[32m    }) + '\n\n')[m
[32m+[m
[32m+[m[32m    if (stats.hasErrors()) {[m
[32m+[m[32m      console.log(chalk.red('  Build failed with errors.\n'))[m
[32m+[m[32m      process.exit(1)[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    console.log(chalk.cyan('  Build complete.\n'))[m
[32m+[m[32m    console.log(chalk.yellow([m
[32m+[m[32m      '  Tip: built files are meant to be served over an HTTP server.\n' +[m
[32m+[m[32m      '  Opening index.html over file:// won\'t work.\n'[m
[32m+[m[32m    ))[m
[32m+[m[32m  })[m
[32m+[m[32m})[m
[1mdiff --git a/build/check-versions.js b/build/check-versions.js[m
[1mnew file mode 100644[m
[1mindex 0000000..3ef972a[m
[1m--- /dev/null[m
[1m+++ b/build/check-versions.js[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32m'use strict'[m
[32m+[m[32mconst chalk = require('chalk')[m
[32m+[m[32mconst semver = require('semver')[m
[32m+[m[32mconst packageConfig = require('../package.json')[m
[32m+[m[32mconst shell = require('shelljs')[m
[32m+[m
[32m+[m[32mfunction exec (cmd) {[m
[32m+[m[32m  return require('child_process').execSync(cmd).toString().trim()[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst versionRequirements = [[m
[32m+[m[32m  {[m
[32m+[m[32m    name: 'node',[m
[32m+[m[32m    currentVersion: semver.clean(process.version),[m
[32m+[m[32m    versionRequirement: packageConfig.engines.node[m
[32m+[m[32m  }[m
[32m+[m[32m][m
[32m+[m
[32m+[m[32mif (shell.which('npm')) {[m
[32m+[m[32m  versionRequirements.push({[m
[32m+[m[32m    name: 'npm',[m
[32m+[m[32m    currentVersion: exec('npm --version'),[m
[32m+[m[32m    versionRequirement: packageConfig.engines.npm[m
[32m+[m[32m  })[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mmodule.exports = function () {[m
[32m+[m[32m  const warnings = [][m
[32m+[m
[32m+[m[32m  for (let i = 0; i < versionRequirements.length; i++) {[m
[32m+[m[32m    const mod = versionRequirements[i][m
[32m+[m
[32m+[m[32m    if (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) {[m
[32m+[m[32m      warnings.push(mod.name + ': ' +[m
[32m+[m[32m        chalk.red(mod.currentVersion) + ' should be ' +[m
[32m+[m[32m        chalk.green(mod.versionRequirement)[m
[32m+[m[32m      )[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  if (warnings.length) {[m
[32m+[m[32m    console.log('')[m
[32m+[m[32m    console.log(chalk.yellow('To use this template, you must update following to modules:'))[m
[32m+[m[32m    console.log()[m
[32m+[m
[32m+[m[32m    for (let i = 0; i < warnings.length; i++) {[m
[32m+[m[32m      const warning = warnings[i][m
[32m+[m[32m      console.log('  ' + warning)[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    console.log()[m
[32m+[m[32m    process.exit(1)[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/build/logo.png b/build/logo.png[m
[1mnew file mode 100644[m
[1mindex 0000000..f3d2503[m
Binary files /dev/null and b/build/logo.png differ
[1mdiff --git a/build/utils.js b/build/utils.js[m
[1mnew file mode 100644[m
[1mindex 0000000..e534fb0[m
[1m--- /dev/null[m
[1m+++ b/build/utils.js[m
[36m@@ -0,0 +1,101 @@[m
[32m+[m[32m'use strict'[m
[32m+[m[32mconst path = require('path')[m
[32m+[m[32mconst config = require('../config')[m
[32m+[m[32mconst ExtractTextPlugin = require('extract-text-webpack-plugin')[m
[32m+[m[32mconst packageConfig = require('../package.json')[m
[32m+[m
[32m+[m[32mexports.assetsPath = function (_path) {[m
[32m+[m[32m  const assetsSubDirectory = process.env.NODE_ENV === 'production'[m
[32m+[m[32m    ? config.build.assetsSubDirectory[m
[32m+[m[32m    : config.dev.assetsSubDirectory[m
[32m+[m
[32m+[m[32m  return path.posix.join(assetsSubDirectory, _path)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexports.cssLoaders = function (options) {[m
[32m+[m[32m  options = options || {}[m
[32m+[m
[32m+[m[32m  const cssLoader = {[m
[32m+[m[32m    loader: 'css-loader',[m
[32m+[m[32m    options: {[m
[32m+[m[32m      sourceMap: options.sourceMap[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  const postcssLoader = {[m
[32m+[m[32m    loader: 'postcss-loader',[m
[32m+[m[32m    options: {[m
[32m+[m[32m      sourceMap: options.sourceMap[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  // generate loader string to be used with extract text plugin[m
[32m+[m[32m  function generateLoaders (loader, loaderOptions) {[m
[32m+[m[32m    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader][m
[32m+[m
[32m+[m[32m    if (loader) {[m
[32m+[m[32m      loaders.push({[m
[32m+[m[32m        loader: loader + '-loader',[m
[32m+[m[32m        options: Object.assign({}, loaderOptions, {[m
[32m+[m[32m          sourceMap: options.sourceMap[m
[32m+[m[32m        })[m
[32m+[m[32m      })[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Extract CSS when that option is specified[m
[32m+[m[32m    // (which is the case during production build)[m
[32m+[m[32m    if (options.extract) {[m
[32m+[m[32m      return ExtractTextPlugin.extract({[m
[32m+[m[32m        use: loaders,[m
[32m+[m[32m        fallback: 'vue-style-loader'[m
[32m+[m[32m      })[m
[32m+[m[32m    } else {[m
[32m+[m[32m      return ['vue-style-loader'].concat(loaders)[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  // https://vue-loader.vuejs.org/en/configurations/extract-css.html[m
[32m+[m[32m  return {[m
[32m+[m[32m    css: generateLoaders(),[m
[32m+[m[32m    postcss: generateLoaders(),[m
[32m+[m[32m    less: generateLoaders('less'),[m
[32m+[m[32m    sass: generateLoaders('sass', { indentedSyntax: true }),[m
[32m+[m[32m    scss: generateLoaders('sass'),[m
[32m+[m[32m    stylus: generateLoaders('stylus'),[m
[32m+[m[32m    styl: generateLoaders('stylus')[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// Generate loaders for standalone style files (outside of .vue)[m
[32m+[m[32mexports.styleLoaders = function (options) {[m
[32m+[m[32m  const output = [][m
[32m+[m[32m  const loaders = exports.cssLoaders(options)[m
[32m+[m
[32m+[m[32m  for (const extension in loaders) {[m
[32m+[m[32m    const loader = loaders[extension][m
[32m+[m[32m    output.push({[m
[32m+[m[32m      test: new RegExp('\\.' + extension + '$'),[m
[32m+[m[32m      use: loader[m
[32m+[m[32m    })[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  return output[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexports.createNotifierCallback = () => {[m
[32m+[m[32m  const notifier = require('node-notifier')[m
[32m+[m
[32m+[m[32m  return (severity, errors) => {[m
[32m+[m[32m    if (severity !== 'error') return[m
[32m+[m
[32m+[m[32m    const error = errors[0][m
[32m+[m[32m    const filename = error.file && error.file.split('!').pop()[m
[32m+[m
[32m+[m[32m    notifier.notify({[m
[32m+[m[32m      title: packageConfig.name,[m
[32m+[m[32m      message: severity + ': ' + error.name,[m
[32m+[m[32m      subtitle: filename || '',[m
[32m+[m[32m      icon: path.join(__dirname, 'logo.png')[m
[32m+[m[32m    })[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[1mdiff --git a/build/vue-loader.conf.js b/build/vue-loader.conf.js[m
[1mnew file mode 100644[m
[1mindex 0000000..33ed58b[m
[1m--- /dev/null[m
[1m+++ b/build/vue-loader.conf.js[m
[36m@@ -0,0 +1,22 @@[m
[32m+[m[32m'use strict'[m
[32m+[m[32mconst utils = require('./utils')[m
[32m+[m[32mconst config = require('../config')[m
[32m+[m[32mconst isProduction = process.env.NODE_ENV === 'production'[m
[32m+[m[32mconst sourceMapEnabled = isProduction[m
[32m+[m[32m  ? config.build.productionSourceMap[m
[32m+[m[32m  : config.dev.cssSourceMap[m
[32m+[m
[32m+[m[32mmodule.exports = {[m
[32m+[m[32m  loaders: utils.cssLoaders({[m